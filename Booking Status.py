# -*- coding: utf-8 -*-
"""Lokesh.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Ey_6xr22hH8rt96ZXdHMVK_Pww2asuId
"""

pip install gradio

pip install gradio --upgrade

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt

import gradio as gr


def predict_booking_status(
    no_of_adults, no_of_children, no_of_weekend_nights, no_of_week_nights,
    type_of_meal_plan, required_car_parking_space, room_type_reserved,
    lead_time, arrival_year, arrival_month, arrival_date,
    market_segment_type, repeated_guest, no_of_previous_cancellations,
    no_of_previous_bookings_not_canceled, avg_price_per_room,
    no_of_special_requests):

    try:

        df=pd.read_csv('/content/Hotel Reservations.csv')
        df

        df = df.drop('Booking_ID', axis = 1)
        df.head()

        from sklearn.preprocessing import LabelEncoder
        le=LabelEncoder()
        for i in df:
          df[i]=le.fit_transform(df[i])

        X = df.drop('booking_status', axis=1)
        y = df['booking_status']

        from sklearn.model_selection import train_test_split
        x_train,x_test,y_train,y_test=train_test_split(X,y,test_size=0.8,random_state=4)

        from sklearn.ensemble import RandomForestClassifier

        rd_clf = RandomForestClassifier()
        rd_clf.fit(x_train, y_train)

        y_pred_rd_clf = rd_clf.predict(x_test)

        from sklearn.metrics import accuracy_score,classification_report

        acc_rd_clf = accuracy_score(y_test, y_pred_rd_clf)




        input_data = [[
              no_of_adults, no_of_children, no_of_weekend_nights, no_of_week_nights,
              type_of_meal_plan, required_car_parking_space, room_type_reserved,
              lead_time, arrival_year, arrival_month, arrival_date,
              market_segment_type, repeated_guest, no_of_previous_cancellations,
              no_of_previous_bookings_not_canceled, avg_price_per_room,
              no_of_special_requests
          ]]
        prediction=rd_clf.predict(input_data)

        result= "Not Canceled" if prediction[0] == 1 else "Canceled"

        return result
    except Exception as e:
      return str(e)


# Define the Gradio interface
iface = gr.Interface(
    fn=predict_booking_status,
    inputs=[
        "number",
        "number",
        "number",
        "number",
        "number",
        "number",
        "number",
        "number",
        "number",
        "number",
        "number",
        "number",
        "number",
        "number",
        "number",
        "number",
        "number",


        #gr.inputs.Number(label="Number of Adults"),
        #gr.inputs.Number(label="Number of Children"),
        #gr.inputs.Number(label="Number of Weekend Nights"),
        #gr.inputs.Number(label="Number of Week Nights"),
        #gr.inputs.Number(label="Type of Meal Plan"),
        #gr.inputs.Number(label="Required Car Parking Space"),
        #gr.inputs.Number(label="Room Type Reserved"),
        #gr.inputs.Number(label="Lead Time"),
        #gr.inputs.Number(label="Arrival Year"),
        #gr.inputs.Number(label="Arrival Month"),
        #gr.inputs.Number(label="Arrival Date"),
        #gr.inputs.Number(label="Market Segment Type"),
        #gr.inputs.Number(label="Repeated Guest"),
        #gr.inputs.Number(label="Number of Previous Cancellations"),
        #gr.inputs.Number(label="Number of Previous Bookings Not Canceled"),
        #gr.inputs.Number(label="Average Price Per Room"),
        #gr.inputs.Number(label="Number of Special Requests")
    ],
    outputs="text"
)

# Start the Gradio app
iface.launch()